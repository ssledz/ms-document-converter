package pl.softech.doc;

import java.io.OutputStream;
import java.lang.reflect.Field;

import javax.xml.bind.JAXBElement;
import javax.xml.namespace.QName;

import org.docx4j.Docx4J;
import org.docx4j.convert.out.FOSettings;
import org.docx4j.docProps.core.CoreProperties;
import org.docx4j.docProps.core.dc.elements.SimpleLiteral;
import org.docx4j.fonts.Mapper;
import org.docx4j.model.fields.FieldFormattingException;
import org.docx4j.model.fields.FieldUpdater;
import org.docx4j.model.fields.FieldValueException;
import org.docx4j.model.fields.docproperty.DocPropertyResolver;
import org.docx4j.openpackaging.exceptions.Docx4JException;
import org.docx4j.openpackaging.packages.WordprocessingMLPackage;
import org.docx4j.openpackaging.parts.DocPropsCorePart;
import org.docx4j.openpackaging.parts.DocPropsCustomPart;
import org.springframework.util.ReflectionUtils;

public class Docx4jWordDocumentConverter implements DocumentConverter {

    private final Mapper fontMapper;

    public Docx4jWordDocumentConverter(Mapper fontMapper) {
	this.fontMapper = fontMapper;
    }

    private void fillCoreProperties(WordprocessingMLPackage wordMLPackage) throws Docx4JException {
	CoreProperties coreProperties = null;

	if (wordMLPackage.getDocPropsCorePart() != null) {
	    coreProperties = wordMLPackage.getDocPropsCorePart().getContents();
	} else {
	    DocPropsCorePart docPropsCorePart = new DocPropsCorePart();
	    wordMLPackage.addTargetPart(docPropsCorePart);
	    org.docx4j.docProps.core.ObjectFactory factory = new org.docx4j.docProps.core.ObjectFactory();
	    coreProperties = factory.createCoreProperties();
	    docPropsCorePart.setJaxbElement(coreProperties);
	    docPropsCorePart.setJAXBContext(org.docx4j.jaxb.Context.jcDocPropsCore);
	}

	if (coreProperties.getTitle() == null) {
	    SimpleLiteral literal = new SimpleLiteral();
	    literal.getContent().add("Title");
	    coreProperties.setTitle(new JAXBElement<SimpleLiteral>(new QName("title"), SimpleLiteral.class, literal));
	}
    }

    private void fillCustomProperties(WordprocessingMLPackage wordMLPackage) throws Docx4JException {
	DocPropsCustomPart docPropsCustomPart = wordMLPackage.getDocPropsCustomPart();

	org.docx4j.docProps.custom.ObjectFactory factory = new org.docx4j.docProps.custom.ObjectFactory();
	if (docPropsCustomPart == null) {
	    docPropsCustomPart = new DocPropsCustomPart();
	    wordMLPackage.addTargetPart(docPropsCustomPart);
	    org.docx4j.docProps.custom.Properties customProps = factory.createProperties();
	    docPropsCustomPart.setJaxbElement(customProps);
	    docPropsCustomPart.setJAXBContext(org.docx4j.jaxb.Context.jcDocPropsCustom);
	}

	docPropsCustomPart.setProperty("\"DocID\"", "123");
	docPropsCustomPart.setProperty("\"Effective Date\"", "123");
	docPropsCustomPart.setProperty("DocumentType", "123");

    }

    @Override
    public void convertToPdf(AbstractDocument document, OutputStream out) throws Exception {
	final WordprocessingMLPackage wordMLPackage = WordprocessingMLPackage.load(document.getInputStream());

	wordMLPackage.setFontMapper(fontMapper);

	final FOSettings foSettings = Docx4J.createFOSettings();

	foSettings.setWmlPackage(wordMLPackage);
	foSettings.addFeatures(new String[] { "PP_APACHEFOP_DISABLE_PAGEBREAK_LIST_ITEM" });

	fillCoreProperties(wordMLPackage);
	fillCustomProperties(wordMLPackage);

	FieldUpdater fieldUpdater = new FieldUpdater(wordMLPackage);
	Field field = ReflectionUtils.findField(FieldUpdater.class, "docPropertyResolver");
	field.setAccessible(true);
	ReflectionUtils.setField(field, fieldUpdater, new MyDocPropertyResolver(wordMLPackage));
	fieldUpdater.update(true);

	Docx4J.toFO(foSettings, out, Docx4J.FLAG_EXPORT_PREFER_XSL);

    }

    private class MyDocPropertyResolver extends DocPropertyResolver {

	public MyDocPropertyResolver(WordprocessingMLPackage wordMLPackage) {
	    super(wordMLPackage);
	}

	@Override
	public String getValue(String key) throws FieldFormattingException, FieldValueException {
	    try {
		return super.getValue(key);
	    } catch (Exception e) {
		return "AutoGenerated";
	    }
	}

    }

}
